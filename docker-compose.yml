services:
  db:
    image: postgres:17
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce_network
    # Healthcheck para asegurar que la DB estÃ© lista
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - '4000:4000'
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./api/.env
    volumes:
      - ./api:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'ðŸš€ Iniciando API...' &&
        npm install &&
        npx prisma generate &&
        npx prisma migrate deploy &&
        echo 'âœ… Base de datos sincronizada' &&
        npm run dev
      "
    networks:
      - ecommerce_network
    environment:
      - NODE_ENV=development
      - DEBUG=*

  worker:
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    restart: always
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_started
    env_file:
      - ./api/.env
    volumes:
      - ./api:/app
      - /app/node_modules
    command: >
      sh -c "
        echo 'ðŸ‘· Iniciando Workers...' &&
        npm install &&
        npx prisma generate &&
        echo 'ðŸ”„ Ejecutando worker manager...' &&
        npm run dev:worker
      "
    networks:
      - ecommerce_network
    environment:
      - NODE_ENV=development
      - DEBUG=*

networks:
  ecommerce_network:
    driver: bridge

volumes:
  postgres_data:
