// Este es el "plano" de tu base de datos.
// Después de modificarlo, ejecuta `npx prisma migrate dev` para aplicar los cambios.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- CORE & USERS ---

model Client {
  id            String    @id @default(uuid())
  erpCode       String    @unique
  businessName  String
  cuit          String    @unique
  priceListId   Int
  deletedAt     DateTime? // Soft Delete

  // La zona de envío es opcional (nullable), ya que no todos los clientes pueden tener una.
  shippingZoneId String?
  shippingZone  ShippingZone? @relation(fields: [shippingZoneId], references: [id])

  users     User[]
  addresses Address[]
  documents ClientDocument[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String    @id @default(uuid())
  clientId     String
  username     String    @unique
  passwordHash String
  email        String    @unique
  deletedAt    DateTime? // Soft Delete

  client        Client                          @relation(fields: [clientId], references: [id])
  roles         UserRole[]
  cart          Cart?
  orders        Order[]
  notifications Notification[]
  auditLogs     AuditLog[]
  stockAlerts   ProductStockSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  users UserRole[]
}

model UserRole {
  userId String
  roleId Int
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])

  @@id([userId, roleId])
}

model Address {
  id                  String    @id @default(uuid())
  clientId            String
  alias               String
  street              String
  city                String
  zipCode             String
  isDefaultShipping   Boolean   @default(false)
  deletedAt           DateTime? // Soft Delete

  client Client   @relation(fields: [clientId], references: [id])
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- PRODUCTS & CATALOG ---

model Product {
  id              String    @id @default(uuid())
  erpCode         String?   @unique
  sku             String?   @unique
  name            Json
  description     Json?
  productBrandId  String
  categoryId      String
  attributes      Json      @default("{}")
  deletedAt       DateTime? // Soft Delete

  brand                 ProductBrand               @relation(fields: [productBrandId], references: [id])
  category              Category                   @relation(fields: [categoryId], references: [id])
  prices                Price[]
  stockLevels           StockLevel[]
  applications          ProductApplication[]
  cartItems             CartItem[]
  orderItems            OrderItem[]
  stockAlerts           ProductStockSubscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductBrand {
  id        String    @id @default(uuid())
  name      Json
  deletedAt DateTime? // Soft Delete

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      Json
  deletedAt DateTime? // Soft Delete

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id            String  @id @default(uuid())
  productId     String
  priceListId   Int
  currency      String  @default("ARS")
  price         Decimal @db.Decimal(12, 2)

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, priceListId, currency])
}

model StockLevel {
  productId   String
  warehouseId String
  quantity    Int

  product   Product   @relation(fields: [productId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])

  @@id([productId, warehouseId])
}

model Warehouse {
  id          String       @id @default(uuid())
  name        String       @unique
  stockLevels StockLevel[]
}

// --- VEHICLE TAXONOMY & APPLICATIONS ---

model ProductApplication {
  productId           String
  vehicleGenerationId String
  vehicleLocationId   String

  product           Product           @relation(fields: [productId], references: [id])
  vehicleGeneration VehicleGeneration @relation(fields: [vehicleGenerationId], references: [id])
  vehicleLocation   VehicleLocation   @relation(fields: [vehicleLocationId], references: [id])

  @@id([productId, vehicleGenerationId, vehicleLocationId])
}

model VehicleGeneration {
  id              String    @id @default(uuid())
  vehicleModelId  String
  yearStart       Int
  yearEnd         Int
  generationName  String?
  deletedAt       DateTime? // Soft Delete

  vehicleModel VehicleModel         @relation(fields: [vehicleModelId], references: [id])
  applications ProductApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleModel {
  id             String    @id @default(uuid())
  vehicleBrandId String
  name           String
  deletedAt      DateTime? // Soft Delete

  vehicleBrand VehicleBrand        @relation(fields: [vehicleBrandId], references: [id])
  generations  VehicleGeneration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleBrand {
  id        String    @id @default(uuid())
  name      String    @unique
  deletedAt DateTime? // Soft Delete

  vehicleModels VehicleModel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VehicleLocation {
  id           String               @id @default(uuid())
  name         String               @unique
  applications ProductApplication[]
}

// --- TRANSACTIONAL, LOGISTICS & PROMOTIONS ---

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  productId String
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
}

model Order {
  id                  String    @id @default(uuid())
  userId              String
  clientId            String
  status              String
  subtotal            Decimal   @db.Decimal(12, 2)
  discountAmount      Decimal   @default(0) @db.Decimal(12, 2)
  shippingCost        Decimal?  @db.Decimal(10, 2) // Nullable, se define post-creación
  isFreeShipping      Boolean   @default(false)
  totalAmount         Decimal   @db.Decimal(12, 2)
  currency            String
  shippingAddressId   String
  shippingNotes       String?

  user                User                      @relation(fields: [userId], references: [id])
  client              Client                    @relation(fields: [clientId], references: [id])
  shippingAddress     Address                   @relation(fields: [shippingAddressId], references: [id])
  items               OrderItem[]
  appliedPromotions   OrderAppliedPromotion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id                String  @id @default(uuid())
  orderId           String
  productId         String
  quantity          Int
  priceAtPurchase   Decimal @db.Decimal(12, 2)
  productSnapshot   Json

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Promotion {
  id                String    @id @default(uuid())
  name              String
  startsAt          DateTime?
  endsAt            DateTime?

  rules             PromotionRule[]
  appliedToOrders   OrderAppliedPromotion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromotionRule {
  id          String  @id @default(uuid())
  promotionId String
  type        String
  condition   Json
  action      Json

  promotion Promotion @relation(fields: [promotionId], references: [id])
}

model OrderAppliedPromotion {
  orderId           String
  promotionId       String
  discountApplied   Decimal @db.Decimal(12, 2)

  order     Order     @relation(fields: [orderId], references: [id])
  promotion Promotion @relation(fields: [promotionId], references: [id])

  @@id([orderId, promotionId])
}


// --- B2B DOCUMENTS & SYSTEM ---

model ShippingZone {
  id                    String  @id @default(uuid())
  name                  String  @unique
  freeShippingThreshold Decimal @db.Decimal(12, 2)
  clients               Client[]
}

model ClientDocument {
  id              String   @id @default(uuid())
  clientId        String
  documentType    String
  documentNumber  String
  documentDate    DateTime
  fileUrl         String
  totalAmount     Decimal  @db.Decimal(12, 2)

  client Client @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now())
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  title     String
  message   String
  isRead    Boolean   @default(false)

  user      User      @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model ProductStockSubscription {
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model AuditLog {
  id      String    @id @default(uuid())
  userId  String?
  action  String
  details Json?

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model SyncLog {
  id     String   @id @default(uuid())
  jobName String
  status  String

  createdAt DateTime @default(now())
}